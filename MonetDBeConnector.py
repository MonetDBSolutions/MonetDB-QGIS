# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MonetDBeConnector
                                 A QGIS plugin
 MonetDBeConnector
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-27
        git sha              : $Format:%H$
        copyright            : (C) 2021 by MonetDBSolutions
        email                : info@monetdb.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem, QTableView

from qgis.core import (
  QgsProject,
  QgsFeature,
  QgsGeometry,
  QgsVectorLayer,
)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .MonetDBeConnector_dialog import MonetDBeConnectorDialog
from .MonetDBeTableConfig_dialog import MonetDBeTableConfigDialog
from .MonetDBeTableSelect import MonetDBeTableSelectDialog
import os.path

from . import monetdbeconn


class MonetDBeConnector:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MonetDBeConnector_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MonetDBeConnector')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MonetDBeConnector', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = self.plugin_dir + "/icon.png"
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MonetDBeConnector'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        if self.first_start:
            self.first_start = False
            self.dlg = MonetDBeConnectorDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            username = self.dlg.usernameEdit.text()
            password = self.dlg.passwordEdit.text()
            hostname = self.dlg.hostnameEdit.text()
            database = self.dlg.databaseEdit.text()

            self.db = monetdbeconn.MonetDB(username, password,
                                           hostname, database)

            table_conf = self.show_table_select_dialog()

            table_conf.tableWidget.resizeColumnsToContents()
            table_conf.show()
            table_conf_result = table_conf.exec_()

            if table_conf_result:
                out = self.show_table_config_dialog(table_conf)
                if out is not None:
                    self.show_vector_layer(out[0], out[1], out[2])

    def show_vector_layer(self, schema, table_name, column):
        query_for_col_type = f"SELECT {column} FROM {schema}.{table_name}"
        col_type_data = self.db.query(query_for_col_type)
        geom_type = self.db.get_column_type(col_type_data[0][0])

        query = f"SELECT st_asbinary({column}) FROM {schema}.{table_name}"
        data_points = self.db.query(query)

        vl = QgsVectorLayer(geom_type, table_name, "memory")
        pr = vl.dataProvider()
        vl.startEditing()

        fet = QgsFeature()

        for i in data_points:
            g = QgsGeometry()
            d = bytes.fromhex(i[0])
            g.fromWkb(d)
            fet.setGeometry(g)
            pr.addFeatures([fet])

        vl.updateExtents()
        vl.commitChanges()

        QgsProject.instance().addMapLayer(vl)

    def show_table_select_dialog(self):
        table_conf = MonetDBeTableConfigDialog()
        tables = self.db.query(
            "SELECT name, schema_id FROM sys._tables WHERE system = False"
        )

        _tables = [(x[0], x[1]) for x in tables]
        tables = []
        for i in _tables:
            schema_names = self.db.query(
                f"SELECT name FROM sys.schemas WHERE id = {str(i[1])}"
            )
            i = (i[0], i[1], schema_names[0][0])
            tables.append(i)

        table_conf.tableWidget.setRowCount(len(tables))
        table_conf.tableWidget.setColumnCount(3)
        table_conf.tableWidget.setSelectionBehavior(QTableView.SelectRows)

        table_conf.tableWidget.setHorizontalHeaderLabels([u'Table Name',
                                                          u'Schema Name',
                                                          u'Schema ID'])

        for row in range(len(tables)):
            for col in range(1):
                table_item = QTableWidgetItem(
                    str(tables[row][0]).strip()
                )
                table_conf.tableWidget.setItem(row, 0, table_item)

                table_schema_id = QTableWidgetItem(
                    str(tables[row][1]).strip()
                )
                table_conf.tableWidget.setItem(row, 2, table_schema_id)

                table_schema_name = QTableWidgetItem(
                    str(tables[row][2]).strip()
                )
                table_conf.tableWidget.setItem(row, 1, table_schema_name)

        return table_conf

    def show_table_config_dialog(self, table_conf):
        table_select = MonetDBeTableSelectDialog()
        selected = table_conf.tableWidget.selectedItems()
        rows = list(self.chunk(selected, 3))

        col_names = []
        for i in rows:
            q = f"SELECT name FROM sys.describe_columns('{i[1].text()}', '{i[0].text()}')"
            result = self.db.query(q)
            for x in result:
                col_names.append((x[0], i[0].text(), i[1].text()))

        table_select.tableWidget.setRowCount(len(col_names))
        table_select.tableWidget.setColumnCount(3)
        table_select.tableWidget.setSelectionBehavior(QTableView.SelectRows)

        table_select.tableWidget.setHorizontalHeaderLabels([
             u'Col Name',
             u'Table Name',
             u'Schema'
        ])
        for row in range(len(col_names)):
            for col in range(1):
                table_item = QTableWidgetItem(str(col_names[row][0]).strip())
                table_select.tableWidget.setItem(row, 0, table_item)

                _table_name = QTableWidgetItem(str(col_names[row][1]).strip())
                table_select.tableWidget.setItem(row, 1, _table_name)

                schema_name = QTableWidgetItem(str(col_names[row][2]).strip())
                table_select.tableWidget.setItem(row, 2, schema_name)

        table_select.tableWidget.resizeColumnsToContents()
        table_select.show()
        table_select_result = table_select.exec_()

        if table_select_result:
            table_selected_cols = table_select.tableWidget.selectedItems()
            selected_rows = list(self.chunk(table_selected_cols, 3))

            for i in selected_rows:
                col_name = i[0].text()
                table_name = i[1].text()
                schema_name = i[2].text()

                return (schema_name, table_name, col_name)

    def chunk(self, lst, n):
        return zip(*[iter(lst)]*n)
